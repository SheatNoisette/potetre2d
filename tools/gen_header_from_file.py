"""
This tool generates a header file from a file
usage: python gen_header_from_file.py <path/to/file> <header_generated.h>

"""
import sys,os

LINE_LENGTH = 12

def main():
    if len(sys.argv) < 3:
        print("usage: python gen_header_from_file.py <path/to/file> <header_generated.h>")
        return
    file_path = sys.argv[1]
    header_path = sys.argv[2]
    if not os.path.exists(file_path):
        print("file not found")
        return

    header_name = os.path.basename(header_path).split(".")[0].upper()
    count = 0

    with open(file_path, "r") as f:
        lines = f.readlines()
    with open(header_path, "w") as f:
        # Export content
        content = []
        for line in lines:
            for c in line:
                content.append(ord(c))
                count += 1

        f.write("#ifndef __%s_H__\n" % header_name)
        f.write("#define __%s_H__\n" % header_name)
        f.write("\n// /!\\ Autogenerated file, do not edit!\n\n")
        f.write("const char %s_exported[%d] = {\n    " % (header_name.lower(), count + 1))
        for i in range(count):

            if i == count - 1:
                f.write("0x%02X" % content[i])
            else:
                f.write("0x%02X, " % content[i])

            if i % LINE_LENGTH == LINE_LENGTH - 1:
                f.write("\n    ")
        f.write("\n, 0x0 };\n")
        f.write("\n")
        f.write("#define %s_DATA_LENGTH %d\n" % (header_name.upper(), count))
        f.write("\n#endif\n")


if __name__ == "__main__":
    main()
